module common_sat_cp.

regular_cpsat(L, Q, S, M, Q0, Fs, Solver), list(L) =>
    regular_cpsat_aux(L, Q, S, M, Q0, Fs, Solver).
regular_cpsat(L, Q, S, M, Q0, Fs ,Solver), array(L) =>
    regular_cpsat_aux(to_list(L), Q, S, M, Q0, Fs ,Solver).
regular_cpsat(L, _Q, _S, _M, _Q0, _Fs, _Solver) =>
    handle_exception($list_or_array_expected(L),regular).

% W is a list
regular_cpsat_aux(W, Q, S, M, Q0, Fs, Solver) =>
    % If W has index set 1..n, then Visited[1] is the initial state
    % (Q0), and Visited[i+1] holds the state we're in after  processing
    % W[i].  If Visited[n+1] is in Fs, then we succeed (ie. accept the string).
    check_regular_args(Q, S, M, Q0, Fs, Matrix, FsLst),   
    N = len(W),
    Visited = new_array(N+1),            % states
    bp.domain(to_list(Visited),1,Q),
    bp.domain(W,1,S),
    Visited[1] = Q0,                    % initial state
    bp.'::'(Visited[N+1],FsLst),
    %    
    preprocess_regular(Q,S,Matrix,Q0,FsLst,Visited,N),
    post_matrix_element_for_regular(W,1,Matrix,Q,S,Visited,Solver),
    if Solver==cp then 
        bp.wait_to_check_regular(Matrix,Q0,FsLst,W)      % needed for NFA
    end.  

post_matrix_element_for_regular([],_I,_Matrix,_NRows,_NCols,_Visited,_Solver) => true.
post_matrix_element_for_regular([E|L],I,Matrix,NRows,NCols,Visited,Solver) =>
    I1 is I+1,
    matrix_element_for_regular(Matrix,NRows,NCols,Visited[I],E,Visited[I1],Solver),
    post_matrix_element_for_regular(L,I1,Matrix,NRows,NCols,Visited,Solver).

% Here is MiniZinc's infamous matrix element
%     a[i+1] = d[a[i], x[i]]
matrix_element_for_regular(M,NRows,NCols,I,J,MIJ,Solver) =>
    bp.domain(I,1,NRows),
    bp.domain(J,1,NCols),
    (bp.dvar_or_int(MIJ) -> true; bp.fd_new_var(MIJ)),
    Table = [],
    foreach(R in 1..NRows, C in 1..NCols)
        if bp.b_DM_TRUE_cc(I,R) && bp.b_DM_TRUE_cc(J,C) then
            Entry = M[R,C],
            ((list(Entry);struct(Entry)) ->
                foreach(E in Entry, bp.b_DM_TRUE_cc(MIJ,E))
                    Table := [{R,C,E}|Table]
                  end
            ;Entry!==0, bp.b_DM_TRUE_cc(MIJ,Entry) ->
                Table := [{R,C,Entry}|Table]
            ;
                true
            )
        end
    end,
    VarTuple = {I,J,MIJ},
    (Solver==cp ->
        bp.table_in(VarTuple,Table)
    ;        
        bp.'$table_in'(VarTuple,Table)
    ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Visited is a vector of state variables created for the automaton. For each 
% state variable Visited[T] (T=2..MaxSteps), a state cannot be a possible value
% if it cannot be reached from Q0 in T steps. Similarly, for each state variable
% Visited[N-T+2], a state cannot be a possible value either if it cannot be
% reached from any final state in T steps.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
preprocess_regular(Q,S,Matrix,Q0,FsLst,Visited,N) =>
    MaxSteps = N,                                             % consider up to MaxSteps steps
    ReachFromQ0 = new_array(Q,MaxSteps),                      % ReachFromQ0[I,K] is 1 if state I can be reached from Q0 in K steps
    fa_reachable(Q0,1,MaxSteps,S,Matrix,ReachFromQ0),         % forward from Q0, defined in common_sat_cp.pi
    %      
    transport_trans_matrix(Matrix,TMatrix),
    ReachFromF = new_array(Q,MaxSteps),                       % ReachFromF[I,K] is 1 if state I can be reached from a final state in K steps backward
    foreach (F in FsLst)
         fa_reachable(F,1,MaxSteps,S,TMatrix,ReachFromF)      % backward from a final state. 
    end,
    %
    foreach (T in 2..MaxSteps, State in 1..Q)
        if var(ReachFromQ0[State,T]) then                     % State cannot be reached from Q0 in T steps (Q0 is reachable in 1 step)
            bp.domain_set_false(Visited[T],State)
        end,
        if var(ReachFromF[State,T]) then                      % State cannot be reached from any F in T steps (F is reachable in 1 step)
            bp.domain_set_false(Visited[N-T+2],State)
        end
    end.

check_regular_args(Q, S, M, Q0, Fs, Matrix, FsList) =>
    (integer(Q), Q > 0 -> true; handle_exception($positive_integer_expected(Q),regular)),
    (integer(Q0), Q0 > 0 -> true; handle_exception($positive_integer_expected(Q0),regular)),    
    (integer(S), S > 0 -> true; handle_exception($positive_integer_expected(S),regular)),
    (array(Fs) -> FsList = to_list(Fs); FsList=Fs),
    (int_list(FsList) -> true; handle_exception($integer_list_or_array_expected(Fs),regular)),
    (list(M) ->bp.list_matrix_to_array_matrix(M,Matrix); Matrix=M),
    (ground(Matrix) -> true; handle_exception($ground_matrix_expected(M),regular)),
    (check_matrix(Matrix,Q,S) -> true; handle_exception($invalid_matrix(M),regular)).
	
int_list([]) => true.
int_list([I|Is]) => integer(I), int_list(Is).

check_matrix(M,NRows,NCols) =>
    NRows = M.length,
    NCols = M[1].length,
    foreach(R in 2..NRows) 
        M[R].length==NCols 
    end.

matrix_element(M,NRows,NCols,I,J,MIJ,Solver),ground(M),var(MIJ) =>
    bp.domain(I,1,NRows),
    bp.domain(J,1,NCols),
    (bp.dvar_or_int(MIJ) -> true; bp.fd_new_var(MIJ)),
    Table = [],
    foreach(R in 1..NRows, C in 1..NCols)
        if bp.b_DM_TRUE_cc(I,R) && bp.b_DM_TRUE_cc(J,C) then
            Entry = M[R,C],
            (bp.b_DM_TRUE_cc(MIJ,Entry) ->
                Table := [{R,C,Entry}|Table]
            ;
                true
            )
        end
    end,
    VarTuple = {I,J,MIJ},
    (Solver==cp ->
        bp.table_in(VarTuple,Table)
    ;        
        bp.'$table_in'(VarTuple,Table)
    ).
matrix_element(M,NRows,NCols,I,J,MIJ,Solver) =>
    bp.bp_matrix_element(M,NRows,NCols,I,J,MIJ,Solver).


/* Reverse the transition relation of the automaton */
transport_trans_matrix(Matrix,TMatrix) =>
    Q = Matrix.length, S = Matrix[1].length,   % Q is the number of states, S is the number of symbols
    TMatrix = new_array(Q,S),
    foreach (State in 1..Q, Input in 1..S)
        TMatrix[State,Input] = 0
    end,
    foreach (State in 1..Q, Input in 1..S)
        Entry = Matrix[State,Input],
%        printf("%d %d %w\n",State,Input,Entry),
        (list(Entry) ->
            foreach (PreState in Entry)
                TEntry = TMatrix[PreState,Input],
                (TEntry == 0 ->
                    TMatrix[PreState,Input] := State
                ;integer(TEntry) ->
                    TMatrix[PreState,Input] := [State,TEntry]
                ;   % TEntry is list
                    TMatrix[PreState,Input] := [State|TEntry]
                )
            end
        ; Entry !== 0 ->
            TEntry = TMatrix[Entry,Input],
            (TEntry == 0 ->
                TMatrix[Entry,Input] := State
            ;integer(TEntry) ->
                TMatrix[Entry,Input] := [State,TEntry]            
            ;
                TMatrix[Entry,Input] := [State|TEntry]
            )
        ;
            true
        )
    end.

% State is reachable from a given state in NSteps
/*
fa_reachable(State,NSteps,_N,_S,_Matrix,_Reach) ?=>
    writeln($fa_reachable(State,NSteps)),fail.
*/
fa_reachable(_State,NSteps,N,_S,_Matrix,_Reach), NSteps>N => true.
fa_reachable(State,NSteps,N,S,Matrix,Reach) =>
    Reached = Reach[State,NSteps],
	if var(Reached) then   % State hasn't been reached in NSteps before
	    Reached = 1,
    	NSteps1 = NSteps+1,
    	foreach (Input in 1..S)
            Entry = Matrix[State,Input],
        	if list(Entry) then
                foreach (NextState in Entry)
                    fa_reachable(NextState,NSteps1,N,S,Matrix,Reach)
            	end
        	elseif Entry !== 0 then
        	    fa_reachable(Entry,NSteps1,N,S,Matrix,Reach)
      		end
    	end
	end.

%%
check_scalars(A,X) =>
    if list_or_array(A) then
        if list_or_array(X) then
            if length(A) !== length(X) then
                handle_exception($scalars_of_different_lengths(A,X),scalar_product)
            end
        else
            handle_exception($list_or_array_expected(X),scalar_product)
        end
    else
        handle_exception($list_or_array_expected(A),scalar_product)
    end.

list_or_array(A), list(A) => true.
list_or_array(A), array(A) => true.
