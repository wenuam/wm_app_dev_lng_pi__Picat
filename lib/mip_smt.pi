'::'(Vars,Domain) =>
    bp.'_$_picat_mip_in'(Vars,Domain).

% element(I,FDVars,V) => element(I,FDVars,V).
element(I,FDVars,V) =>
    (array(FDVars) -> to_list(FDVars) = List; List = FDVars),
    (bp.dvar_or_int_list(List) -> true; handle_exception($dvar_or_int_list_expected(List), element)),
    bp.'$element'(I,List,V,mip).

% 0-based indexing
% element0(I,FDVars,V) => element0(I,FDVars,V).
element0(I,FDVars,V) =>
    (array(FDVars) -> to_list(FDVars) = List; List = FDVars),
    (bp.dvar_or_int_list(List) -> true; handle_exception($dvar_or_int_list_expected(List), element)),
    bp.'$element0'(I,List,V,mip).

% all_distinct(FDVars) => all_distinct(FDVars).
all_distinct(FDVars) =>
    all_different(FDVars).

% all_different(FDVars) => all_different(FDVars).
all_different(FDVars), array(FDVars) =>
    alldifferent_aux(FDVars).
all_different(FDVars), list(FDVars) =>
    Arr = to_array(FDVars),
    alldifferent_aux(Arr).
all_different(FDVars) =>
    handle_exception($list_or_array_expected(FDVars), all_different).

alldifferent_aux(Arr) =>
    N = len(Arr),
    foreach (I in 1..N-1, J in I+1..N)
        Arr[I] #!= Arr[J]
    end.

%
% Requires that all non-zero values in Xs are distinct.
%
alldifferent_except_0(Xs) =>
    all_different_except_0(Xs).

all_different_except_0(Xs) =>
    (list(Xs) ->
        Arr = to_array(Xs)
    ;array(Xs) ->
        Arr = Xs
    ;
        handle_exception($dvar_or_int_collection_expected(Xs), all_different_except_0)
    ),
    all_different_except_0_aux(Arr).

all_different_except_0_aux(Xs) =>
    N = len(Xs),
    foreach(I in 1..N-1, J in I+1..N)
        Xs[I] #= 0 #\/ Xs[J] #= 0 #\/ Xs[I] #!= Xs[J]
    end.

